{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"REST API Server","text":"<p>This is the document website for REST API Server</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ol> <li>Home</li> <li>About</li> <li>Mkdocs</li> <li>References</li> </ol>"},{"location":"about/","title":"About Rest API Server","text":""},{"location":"about/#road-map","title":"Road Map","text":""},{"location":"about/#short-term","title":"Short Term","text":""},{"location":"about/#long-term","title":"Long Term","text":""},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#swagger-petstore-openapi-30-1011","title":"Swagger Petstore - OpenAPI 3.0 1.0.11","text":"<p>This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at https://swagger.io. In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.</p> <p>If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click  here. Alternatively, you can load via the <code>Edit &gt; Load Petstore OAS 2.0</code> menu option!</p> <p>Some useful links: - The Pet Store repository - The source API definition for the Pet Store</p> Terms of service: http://swagger.io/terms/ Contact:  apiteam@swagger.io License: Apache 2.0"},{"location":"api/#servers","title":"Servers","text":"Description URL https://petstore3.swagger.io/api/v3 https://petstore3.swagger.io/api/v3"},{"location":"api/#pet","title":"pet","text":""},{"location":"api/#put-pet","title":"PUT /pet","text":"<p>Update an existing pet</p> Description <p>Update an existing pet by Id</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <p>Request body</p> application/jsonapplication/xmlapplication/x-www-form-urlencoded <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 120,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 127,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 235,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 174,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 262,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p> <p> Response 405 Method Not Allowed </p>"},{"location":"api/#post-pet","title":"POST /pet","text":"<p>Add a new pet to the store</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <p>Request body</p> application/jsonapplication/xmlapplication/x-www-form-urlencoded <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 134,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 49,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 34,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 11,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 94,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p> Response 405 Method Not Allowed </p>"},{"location":"api/#get-petfindbystatus","title":"GET /pet/findByStatus","text":"<p>Finds Pets by status</p> Description <p>Multiple status values can be provided with comma separated strings</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>status</code> query string available No Status values that need to be considered for filter <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>[\n    {\n        \"id\": 10,\n        \"name\": \"doggie\",\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Dogs\"\n        },\n        \"photoUrls\": [\n            \"string\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 213,\n                \"name\": \"string\"\n            }\n        ],\n        \"status\": \"available\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Pet\"\n    }\n}\n</code></pre> <p><pre><code>[\n    {\n        \"id\": 10,\n        \"name\": \"doggie\",\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Dogs\"\n        },\n        \"photoUrls\": [\n            \"string\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 165,\n                \"name\": \"string\"\n            }\n        ],\n        \"status\": \"available\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Pet\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p>"},{"location":"api/#get-petfindbytags","title":"GET /pet/findByTags","text":"<p>Finds Pets by tags</p> Description <p>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>tags</code> query array No Tags to filter by <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>[\n    {\n        \"id\": 10,\n        \"name\": \"doggie\",\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Dogs\"\n        },\n        \"photoUrls\": [\n            \"string\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 75,\n                \"name\": \"string\"\n            }\n        ],\n        \"status\": \"available\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Pet\"\n    }\n}\n</code></pre> <p><pre><code>[\n    {\n        \"id\": 10,\n        \"name\": \"doggie\",\n        \"category\": {\n            \"id\": 1,\n            \"name\": \"Dogs\"\n        },\n        \"photoUrls\": [\n            \"string\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 153,\n                \"name\": \"string\"\n            }\n        ],\n        \"status\": \"available\"\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Pet\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p>"},{"location":"api/#get-petpetid","title":"GET /pet/{petId}","text":"<p>Find pet by ID</p> Description <p>Returns a single pet</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>api_key</code> header string N/A No API key <code>petId</code> path integer No ID of pet to return <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 256,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"name\": \"doggie\",\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Dogs\"\n    },\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 126,\n            \"name\": \"string\"\n        }\n    ],\n    \"status\": \"available\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"required\": [\n        \"name\",\n        \"photoUrls\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"example\": \"doggie\"\n        },\n        \"category\": {\n            \"$ref\": \"#/components/schemas/Category\"\n        },\n        \"photoUrls\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"type\": \"string\",\n                \"xml\": {\n                    \"name\": \"photoUrl\"\n                }\n            }\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"xml\": {\n                \"wrapped\": true\n            },\n            \"items\": {\n                \"$ref\": \"#/components/schemas/Tag\"\n            }\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"pet status in the store\",\n            \"enum\": [\n                \"available\",\n                \"pending\",\n                \"sold\"\n            ]\n        }\n    },\n    \"xml\": {\n        \"name\": \"pet\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#post-petpetid","title":"POST /pet/{petId}","text":"<p>Updates a pet in the store with form data</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>name</code> query string No Name of pet that needs to be updated <code>petId</code> path integer No ID of pet that needs to be updated <code>status</code> query string No Status of pet that needs to be updated <p> Response 405 Method Not Allowed </p>"},{"location":"api/#delete-petpetid","title":"DELETE /pet/{petId}","text":"<p>Deletes a pet</p> Description <p>delete a pet</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>api_key</code> header string No <code>petId</code> path integer No Pet id to delete <p> Response 400 Bad Request </p>"},{"location":"api/#post-petpetiduploadimage","title":"POST /pet/{petId}/uploadImage","text":"<p>uploads an image</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>petstore_auth</code> header string N/A No <code>additionalMetadata</code> query string No Additional Metadata <code>petId</code> path integer No ID of pet to update <p>Request body</p> application/octet-stream <p><pre><code>\"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\"\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"string\",\n    \"format\": \"binary\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"code\": 72,\n    \"type\": \"string\",\n    \"message\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n        },\n        \"type\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"##default\"\n    }\n}\n</code></pre>"},{"location":"api/#store","title":"store","text":""},{"location":"api/#get-storeinventory","title":"GET /store/inventory","text":"<p>Returns pet inventories by status</p> Description <p>Returns a map of status codes to quantities</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>api_key</code> header string N/A No API key <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"additionalProperties\": {\n        \"type\": \"integer\",\n        \"format\": \"int32\"\n    }\n}\n</code></pre>"},{"location":"api/#post-storeorder","title":"POST /store/order","text":"<p>Place an order for a pet</p> Description <p>Place a new order in the store</p> <p>Request body</p> application/jsonapplication/xmlapplication/x-www-form-urlencoded <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p> Response 405 Method Not Allowed </p>"},{"location":"api/#get-storeorderorderid","title":"GET /store/order/{orderId}","text":"<p>Find purchase order by ID</p> Description <p>For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generate exceptions.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>orderId</code> path integer No ID of order that needs to be fetched <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"petId\": 198772,\n    \"quantity\": 7,\n    \"shipDate\": \"2022-04-13T15:42:05.901Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"petId\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 198772\n        },\n        \"quantity\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 7\n        },\n        \"shipDate\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"description\": \"Order Status\",\n            \"example\": \"approved\",\n            \"enum\": [\n                \"placed\",\n                \"approved\",\n                \"delivered\"\n            ]\n        },\n        \"complete\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"xml\": {\n        \"name\": \"order\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#delete-storeorderorderid","title":"DELETE /store/order/{orderId}","text":"<p>Delete purchase order by ID</p> Description <p>For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>orderId</code> path integer No ID of the order that needs to be deleted <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#user","title":"user","text":""},{"location":"api/#post-user","title":"POST /user","text":"<p>Create user</p> Description <p>This can only be done by the logged in user.</p> <p>Request body</p> application/jsonapplication/xmlapplication/x-www-form-urlencoded <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p> Other responses </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre>"},{"location":"api/#post-usercreatewithlist","title":"POST /user/createWithList","text":"<p>Creates list of users with given input array</p> <p>Request body</p> application/json <p><pre><code>[\n    {\n        \"id\": 10,\n        \"username\": \"theUser\",\n        \"firstName\": \"John\",\n        \"lastName\": \"James\",\n        \"email\": \"john@email.com\",\n        \"password\": \"12345\",\n        \"phone\": \"12345\",\n        \"userStatus\": 1\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/User\"\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p> Other responses </p>"},{"location":"api/#get-userlogin","title":"GET /user/login","text":"<p>Logs user into the system</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>password</code> query string No The password for login in clear text <code>username</code> query string No The user name for login <p> Response 200 OK </p> application/xmlapplication/json <p><pre><code>\"string\"\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"string\"\n}\n</code></pre> <p><pre><code>\"string\"\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"string\"\n}\n</code></pre> <p>Response headers</p> Name Description Schema <code>X-Rate-Limit</code> calls per hour allowed by the user integer(int32) <code>X-Expires-After</code> date in UTC when token expires string(date-time) <p> Response 400 Bad Request </p>"},{"location":"api/#get-userlogout","title":"GET /user/logout","text":"<p>Logs out current logged in user session</p> <p> Other responses </p>"},{"location":"api/#get-userusername","title":"GET /user/{username}","text":"<p>Get user by user name</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>username</code> path string No The name that needs to be fetched. Use user1 for testing.  <p> Response 200 OK </p> application/jsonapplication/xml <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#put-userusername","title":"PUT /user/{username}","text":"<p>Update user</p> Description <p>This can only be done by the logged in user.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>username</code> path string No name that need to be deleted <p>Request body</p> application/jsonapplication/xmlapplication/x-www-form-urlencoded <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p><pre><code>{\n    \"id\": 10,\n    \"username\": \"theUser\",\n    \"firstName\": \"John\",\n    \"lastName\": \"James\",\n    \"email\": \"john@email.com\",\n    \"password\": \"12345\",\n    \"phone\": \"12345\",\n    \"userStatus\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\",\n            \"example\": 10\n        },\n        \"username\": {\n            \"type\": \"string\",\n            \"example\": \"theUser\"\n        },\n        \"firstName\": {\n            \"type\": \"string\",\n            \"example\": \"John\"\n        },\n        \"lastName\": {\n            \"type\": \"string\",\n            \"example\": \"James\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"example\": \"john@email.com\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"phone\": {\n            \"type\": \"string\",\n            \"example\": \"12345\"\n        },\n        \"userStatus\": {\n            \"type\": \"integer\",\n            \"description\": \"User Status\",\n            \"format\": \"int32\",\n            \"example\": 1\n        }\n    },\n    \"xml\": {\n        \"name\": \"user\"\n    }\n}\n</code></pre> <p> Other responses </p>"},{"location":"api/#delete-userusername","title":"DELETE /user/{username}","text":"<p>Delete user</p> Description <p>This can only be done by the logged in user.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>username</code> path string No The name that needs to be deleted <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"api/#schemas","title":"Schemas","text":""},{"location":"api/#address","title":"Address","text":"Name Type <code>city</code> string <code>state</code> string <code>street</code> string <code>zip</code> string"},{"location":"api/#apiresponse","title":"ApiResponse","text":"Name Type <code>code</code> integer(int32) <code>message</code> string <code>type</code> string"},{"location":"api/#category","title":"Category","text":"Name Type <code>id</code> integer(int64) <code>name</code> string"},{"location":"api/#customer","title":"Customer","text":"Name Type <code>address</code> Array&lt;Address&gt; <code>id</code> integer(int64) <code>username</code> string"},{"location":"api/#order","title":"Order","text":"Name Type <code>complete</code> boolean <code>id</code> integer(int64) <code>petId</code> integer(int64) <code>quantity</code> integer(int32) <code>shipDate</code> string(date-time) <code>status</code> string"},{"location":"api/#pet_1","title":"Pet","text":"Name Type <code>category</code> Category <code>id</code> integer(int64) <code>name</code> string <code>photoUrls</code> Array&lt;string&gt; <code>status</code> string <code>tags</code> Array&lt;Tag&gt;"},{"location":"api/#tag","title":"Tag","text":"Name Type <code>id</code> integer(int64) <code>name</code> string"},{"location":"api/#user_1","title":"User","text":"Name Type <code>email</code> string <code>firstName</code> string <code>id</code> integer(int64) <code>lastName</code> string <code>password</code> string <code>phone</code> string <code>username</code> string <code>userStatus</code> integer(int32)"},{"location":"api/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description petstore_auth oauth2 api_key apiKey"},{"location":"api/#tags","title":"Tags","text":"Name Description pet Everything about your Pets store Access to Petstore orders user Operations about user"},{"location":"api/#more-documentation","title":"More documentation","text":"<p>Find out more about Swagger</p> For more information: http://swagger.io"},{"location":"mkdocs/","title":"MkDocs","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p> <p>To set up MkDocs in our Project we need to:</p> <ol> <li>Configure MkDocs </li> <li>Documentation files</li> <li>Github Workflow</li> <li>Github Workflow Permissions</li> <li>Add Commit and Push to Github</li> <li>Confirm Github Action</li> <li>Set Repository to use Github Pages</li> </ol>"},{"location":"mkdocs/#1-configure-mkdocs","title":"1. Configure MkDocs","text":"<p>The first thing we need to do is create the configuration file <code>mkdocs.yaml</code> in the root of the repository.</p> <pre><code>touch mkdocs.yaml \n</code></pre> <p>Add the base configuration to <code>./mkdocs.yaml</code> </p> <pre><code># ./mkdocs.yaml\nsite_name: Personal Ledger Documentation\nsite_url: https://ianteda.github.io/Personal_Ledger\ndocs_dir: 'docs'\ntheme:\n  name: 'material'\nnav:\n  - Home: README.md\n  - About: about.md\nplugins:\n  - search\n  - neoteroi.mkdocsoad:\n      use_pymdownx: true\nmarkdown_extensions:\n  - pymdownx.details\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true\nextra_css:\n  - css/neoteroi-mkdocsoad.css\n</code></pre> <p>Add the custom css file <code>~./docs/css/neoteroi-mkdocs.css</code></p>"},{"location":"mkdocs/#2-documentation-files","title":"2. Documentation Files","text":"<p>In the configuration above we set two navigations (pages) Home <code>readme.md</code> and About <code>about.md</code>, we now need to create these</p> <pre><code># REST API Server\n\nThis is the document website for [REST API Server](https://github.com/IanTeda/REST-API-Server)\n\n## Table of Contents\n\n1. [Home](https://ianteda.github.io/REST-API-Server/)\n2. [About](./about.md)\n</code></pre> <pre><code># About Rest API Server\n\n## Road Map\n\n### Short Term\n\n### Long Term\n</code></pre>"},{"location":"mkdocs/#3-github-workflow","title":"3. Github Workflow","text":"<p>Next we need to set up the Github work flows to use two Github actions then run two commands to install MkDoc program files and then execute MkDocs </p> <pre><code># ./github/workflows/mkdocs.yaml\nname: mkdocs\non:\n  push:\n    branches: \n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      # Need to install `mkdocs` and theme `mkdocs-windmill` set in `./mkdocs.yaml` config\n      - run: pip install mkdocs mkdocs-material neoteroi-mkdocs pymdown-extensions\n      # Repository &gt; Settings &gt; Actions &gt; General &gt; Workflow permissions &gt; Read and write permissions\n      - run: mkdocs gh-deploy --force --clean --verbose\n\n# Repository &gt; Settings &gt; Pages &gt; Build and deployment &gt; Branch &gt; gh-pages\n\n## References\n# https://github.com/Neoteroi/mkdocs-plugins\n</code></pre>"},{"location":"mkdocs/#4-github-workflow-permissions","title":"4. Github Workflow Permissions","text":"<p>Let's allow actions to write to the <code>gh-pages</code> branch through Repository Settings &gt; Actions &gt; General &gt; Workflow permissions</p> <p>Then allow Read and write permissions</p> <p></p>"},{"location":"mkdocs/#5-add-commit-and-push-to-github","title":"5. Add Commit and Push to Github","text":"<p>Now we need to add and commit the repository before pushing to Github</p> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"First MkDocs commit\"\n</code></pre> <pre><code>git push\n</code></pre>"},{"location":"mkdocs/#6-confirm-github-action","title":"6. Confirm Github Action","text":"<p>Now that we have pushed to Github lets confirm the workflow executed ok, by going to Actions &gt; All Workflows. </p>"},{"location":"mkdocs/#7-set-repository-to-use-github-pages","title":"7. Set Repository to use Github Pages","text":"<p>We set up pages by going to the Repository Settings &gt; Pages &gt; Build and deployment &gt; Branch.</p> <p>Then set the branch to <code>gh-pages</code>.</p> <p></p> <p>Set the Repository website by updating the About details for the repository and selecting <code>Use your Github Pages website</code>.</p>"},{"location":"mkdocs/#references","title":"References","text":"<ul> <li>Mkdocs</li> </ul>"},{"location":"references/","title":"Reference Websites","text":""},{"location":"references/#rest","title":"REST","text":""},{"location":"references/#document-generation","title":"Document Generation","text":"<ul> <li>Rust Development: Creating a REST API with Actix Web for Beginners</li> <li>MkDocs</li> <li>zero-to-production</li> <li>Creating a Web Service in Rust with Actix-Web, SQLx, and PostgreSQL</li> <li>Rust &amp; Actix Web \u2013 Build a CRUD API with SQLX and MySQL</li> <li>Rust SQLx basics with SQLite: super easy how to</li> <li>REST API Design Best Practices Handbook \u2013 How to Build a REST API with JavaScript, Node.js, and Express.js</li> <li>GitHub REST API documentation</li> <li>REST API Best Practices \u2013 REST Endpoint Design Examples</li> </ul>"},{"location":"swagger/","title":"Swagger","text":"<p>Simplify API development for users, teams, and enterprises with the Swagger open source and professional tool set. Find out how Swagger can help you design and document your APIs at scale.</p> <p>Swagger can be used to define, export and test (maybe?) the API endpoints.</p>"},{"location":"swagger/#installation","title":"Installation","text":"<p>The repository includes a <code>./swagger/docker-compose.yaml</code> that can be used to spin up a docker stack of swagger-editor.</p> <pre><code>docker-compose up -d\n</code></pre> <p>Once the docker has been pulled down and spun up the editor can be reached on http://localhost:8080.</p>"},{"location":"swagger/#usage","title":"Usage","text":"<p>The swagger definitions file is set by default to <code>./swagger/swagger.json</code>. This can be edited with your default editor or swagger-editor.</p>"}]}